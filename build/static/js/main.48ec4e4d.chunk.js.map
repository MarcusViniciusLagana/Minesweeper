{"version":3,"sources":["board.js","gameinfo.js","menu.js","overscreen.js","screens.js","squaresf.js","index.js"],"names":["Square","props","cssClass","squareCSS","value","squareValue","className","onClick","mouse","clickHandle","onContextMenu","preventDefault","BoardRow","columns","squaresValues","map","column","squaresCSS","row","toString","Board","rowsNumber","columnsNumber","rows","Array","initIndex","endIndex","slice","GameInfo","Zerofill","bombsNumber","msg","time","number","width","sign","length","join","LevelOption","label","level","toUpperCase","type","name","id","checked","onChange","element","levelControl","htmlFor","Menu","radios","index","Image","img","initialState","activeCSS","deactiveCSS","alt","src","Button","btn","text","Division","div","content","idx","item","key","push","OverScreen","state","isVisible","autoFadeOut","invisibleTimer","fadeOutTimer","clearInterval","this","setState","turnInvisible","setTimeout","fadeOut","React","Component","initial","victory","explode","OpenAllSquares","minesPositions","bombSymbol","win","includes","CountBombs","OpenSquares","allPositions","positions","i","pos","rowInit","Math","floor","columnInit","bombs","position","Game","minesNumber","random","fill","initialTime","phase","timerID","setInterval","button","sqr","filter","x","indexOf","currentTarget","document","documentElement","style","setProperty","restartGame","popup","screens","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.48ec4e4d.chunk.js","sourcesContent":["function Square (props) {\r\n    const cssClass = props.squareCSS + ' square';\r\n    let value = props.squareValue;\r\n    const clickHandle = (mouse) => props.clickHandle(mouse);\r\n    const contextHandle = (mouse) => {mouse.preventDefault(); props.clickHandle(mouse);}\r\n\r\n    return (\r\n        <button className={cssClass} onClick={clickHandle} onContextMenu={contextHandle}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n\r\n    const columns = props.squaresValues.map((squareValue, column) =>\r\n        <Square key={'square-' + props.row.toString() + '-' + column.toString()}\r\n            squareValue={squareValue}\r\n            squareCSS={props.squaresCSS[column]}\r\n            clickHandle={(mouse) => props.clickHandle(mouse, column)}/>\r\n    );\r\n\r\n    return(\r\n        <div className=\"board-row\">\r\n            {columns}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Board (props) {\r\n    const rowsNumber = props.rowsNumber;\r\n    const columnsNumber = props.columnsNumber;\r\n\r\n    const rows = Array(rowsNumber);\r\n\r\n    for (let row = 0; row < rowsNumber; row++) {\r\n        const initIndex = row * columnsNumber;\r\n        const endIndex = initIndex + columnsNumber;\r\n        const squaresValues = props.squaresValues.slice(initIndex, endIndex);\r\n        const squaresCSS = props.squaresCSS.slice(initIndex, endIndex);\r\n        rows[row] = <BoardRow key={'row-' + row.toString()}\r\n            row={row}\r\n            squaresValues={squaresValues}\r\n            squaresCSS={squaresCSS}\r\n            clickHandle={(mouse, column) => props.clickHandle(mouse, initIndex + column)}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-board\">\r\n            {rows}\r\n        </div>\r\n    );\r\n}","export default function GameInfo (props) {\r\n    return (\r\n        <div className=\"game-info game\">\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.bombsNumber,3)}</p>\r\n            </div>\r\n            <div className=\"game-over\">\r\n                <p>{props.msg}</p>\r\n            </div>\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.time,3)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Zerofill (number,width) {\r\n    let sign = '';\r\n\r\n    if (number < 0) {\r\n        number *= -1;\r\n        sign = '-';\r\n    }\r\n\r\n    width -= number.toString().length - 1;\r\n    if ( width > 0 )\r\n        return sign + new Array(width).join('0') + number;\r\n    \r\n    // Always return a string\r\n    return sign + number + \"\";\r\n}","function LevelOption (props) {\r\n    const onChange = (element) => props.levelControl(element);\r\n    const label = props.level[0].toUpperCase() + props.level.slice(1);\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <input type=\"radio\" name=\"level\"\r\n            id={props.level}\r\n            value={props.level}\r\n            checked={props.checked}\r\n            onChange={onChange}/>\r\n            <label htmlFor={props.level}> {label}</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Menu (props) {\r\n    const levelControl = (element) => props.levelControl(element);\r\n    const levels = ['easy', 'intermediate', 'hard'];\r\n\r\n    const radios = levels.map((level, index) =>\r\n        <LevelOption key={'op-' + index.toString()}\r\n        level={level}\r\n        checked={props.level === level}\r\n        levelControl={levelControl}/>\r\n    );\r\n\r\n    return (\r\n        <div className=\"level game\">\r\n            {radios}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nfunction Image (props) {\r\n    const img = props.img;\r\n    return (\r\n        <img className={props.initialState ? img.activeCSS : img.deactiveCSS} alt={img.alt} src={img.src}/>\r\n    );\r\n}\r\n\r\nfunction Button (props) {\r\n    const btn = props.btn;\r\n    return (\r\n        <button className={props.initialState ? btn.activeCSS : btn.deactiveCSS} onClick={props.clickHandle}>\r\n            {btn.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction Division (props) {\r\n    const div = props.div;\r\n    let content = [];\r\n\r\n    for (let idx = 0; idx < div.content.length; idx++) {\r\n        const item = div.content[idx];\r\n        const key = props.index + '-' + item.type + '-' + idx.toString();\r\n        if (item.type === 'text') content.push(item.text);\r\n        if (item.type === 'img') content.push(<Image key={key} initialState={props.initialState} img={item}/>);\r\n        if (item.type === 'btn') content.push(<Button key={key} initialState={props.initialState} btn={item} clickHandle={props.clickHandle}/>);\r\n        if (item.type === 'div') content.push(<Division key={key} index={key} initialState={props.initialState} div={item} clickHandle={props.clickHandle}/>);\r\n    }\r\n\r\n    return (\r\n        <div className={props.initialState ? div.activeCSS : div.deactiveCSS}>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default class OverScreen extends React.Component {\r\n\r\n    static invisibleTimer = null;\r\n    static fadeOutTimer = null;\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            initialState: true,\r\n            isVisible: true,\r\n            autoFadeOut: props.autoFadeOut,\r\n            time: props.time * 1000,\r\n            content: props.content,\r\n        }\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    componentDidMount () {\r\n        OverScreen.invisibleTimer = null;\r\n        OverScreen.fadeOutTimer = null;\r\n    }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () {\r\n        if (OverScreen.invisibleTimer) clearInterval(OverScreen.invisibleTimer);\r\n        if (OverScreen.fadeOutTimer) clearInterval(OverScreen.fadeOutTimer);\r\n    }\r\n\r\n    turnInvisible () {\r\n        this.setState({ isVisible: false });\r\n    }\r\n\r\n    fadeOut () {\r\n        this.setState({ initialState: false, autoFadeOut: false});\r\n        if (!OverScreen.invisibleTimer)\r\n            OverScreen.invisibleTimer = setTimeout(() => this.turnInvisible(), this.state.time);\r\n        else this.turnInvisible();\r\n    }\r\n\r\n    render () {\r\n\r\n        if (!this.state.isVisible) return null;\r\n\r\n        const div = this.state.content.slice();\r\n        const clickHandle = () => this.fadeOut();\r\n        let content = [];\r\n\r\n        for (let idx = 0; idx < div.length; idx++) {\r\n            const item = div[idx];\r\n            const key = item.type + '-' + idx.toString();\r\n            if (item.type === 'text') content.push(item.text);\r\n            if (item.type === 'img') content.push(<Image key={key} initialState={this.state.initialState} img={item}/>);\r\n            if (item.type === 'btn') content.push(<Button key={key} initialState={this.state.initialState} btn={item} clickHandle={clickHandle}/>);\r\n            if (item.type === 'div') content.push(<Division key={key} index={key} initialState={this.state.initialState} div={item} clickHandle={clickHandle}/>);\r\n        }\r\n\r\n        if (this.state.autoFadeOut && !OverScreen.fadeOutTimer)\r\n            OverScreen.fadeOutTimer = setTimeout(() => this.fadeOut(), this.state.time);\r\n\r\n        return (<> {content} </>);\r\n    }\r\n}","export const initial = [\r\n    {\r\n        type: 'div',\r\n        activeCSS: 'basic initial',\r\n        deactiveCSS: 'basic initial vanish',\r\n        content: [\r\n            {\r\n                type: 'img',\r\n                activeCSS: 'initial-img',\r\n                deactiveCSS: 'initial-img vanish',\r\n                alt: 'background',\r\n                src: './Minebackground.png',\r\n            },\r\n            {\r\n                type: 'img',\r\n                activeCSS: 'initial-img mine',\r\n                deactiveCSS: 'initial-img mine vanish',\r\n                alt: 'Mine by Samuel Schoenberger from the Noun Project',\r\n                src: './MinelogoSolo.png',\r\n            },\r\n            {\r\n                type: 'div',\r\n                activeCSS: 'initial-txt',\r\n                deactiveCSS: 'initial-txt vanish',\r\n                content: [\r\n                    {\r\n                        type: 'text',\r\n                        text: '* Mine icon by Samuel Schoenberger from the Noun Project',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                type: 'btn',\r\n                activeCSS: 'restart-button btn-position',\r\n                deactiveCSS: 'restart-button btn-position vanish',\r\n                text: 'START',\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const victory = [\r\n    {\r\n        type: 'div',\r\n        activeCSS: 'basic transparent',\r\n        deactiveCSS: 'basic transparent',\r\n        content: [\r\n            {\r\n                type: 'div',\r\n                activeCSS: 'basic-bg victory',\r\n                deactiveCSS: 'basic-bg victory',\r\n                content: [\r\n                    {\r\n                        type: 'text',\r\n                        text: 'VICTORY !!!',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const time = [\r\n    {\r\n        type: 'div',\r\n        activeCSS: 'basic transparent',\r\n        deactiveCSS: 'basic transparent',\r\n        content: [\r\n            {\r\n                type: 'div',\r\n                activeCSS: 'basic-bg time',\r\n                deactiveCSS: 'basic-bg time',\r\n                content: [\r\n                    {\r\n                        type: 'text',\r\n                        text: 'Time is Over !!!',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\nexport const explode = [\r\n    {\r\n        type: 'div',\r\n        activeCSS: 'basic blood-transparent',\r\n        deactiveCSS: 'basic blood',\r\n        content: [\r\n            {\r\n                type: 'img',\r\n                activeCSS: 'explosion-position bomb',\r\n                deactiveCSS: 'explosion-position bomb',\r\n                alt: 'explosion',\r\n                src: './explosion.png',\r\n            },\r\n            {\r\n                type: 'div',\r\n                activeCSS: 'foot-movement',\r\n                deactiveCSS: 'foot-movement',\r\n                content: [\r\n                    {\r\n                        type: 'img',\r\n                        activeCSS: 'explosion-position foot',\r\n                        deactiveCSS: 'explosion-position foot',\r\n                        alt: 'foot',\r\n                        src: './foot.png',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                type: 'div',\r\n                activeCSS: 'no-text',\r\n                deactiveCSS: 'basic-bg yes-text',\r\n                content: [\r\n                    {\r\n                        type: 'text',\r\n                        text: 'You Died !!!',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                type: 'btn',\r\n                activeCSS: 'basic transparent',\r\n                deactiveCSS: 'basic transparent',\r\n                text: null,\r\n            },\r\n        ],\r\n    },\r\n];","export function OpenAllSquares (squaresValues, squaresCSS, minesPositions, bombSymbol, rows, columns, win=false) {\r\n    for (let index = 0; index < squaresValues.length; index++) {\r\n        if (minesPositions.includes(index)) {\r\n            squaresValues[index] = squaresCSS[index] === 'saved' || win ? '\\u2713' :\r\n                bombSymbol;\r\n            squaresCSS[index] = squaresCSS[index] === 'saved' || win ? 'saved-true' :\r\n                'clicked exploded';\r\n        }\r\n        if (squaresCSS[index] === 'saved') {\r\n            squaresValues[index] = '\\u2717';\r\n            squaresCSS[index] = 'exploded';\r\n        }\r\n        if (!squaresCSS[index]) {\r\n            [squaresValues[index], squaresCSS[index]] = CountBombs(index, minesPositions,\r\n                rows, columns);\r\n            if (squaresValues[index] === 0) squaresValues[index] = '';\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nexport function OpenSquares (index, squaresValues, squaresCSS, minesPositions, rows, columns) {\r\n    let allPositions = [index];\r\n    let positions = [];\r\n    let i = 0;\r\n\r\n    while (true) {\r\n        // if square was not clicked:\r\n        if (!squaresCSS[allPositions[i]]) {\r\n            // Count bombs around the square, update value with the number of bombs\r\n            // and squaresCSS with 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            [squaresValues[allPositions[i]], squaresCSS[allPositions[i]], positions] =\r\n                CountBombs(allPositions[i], minesPositions, rows, columns);\r\n            if (squaresValues[allPositions[i]] === 0) {\r\n                squaresValues[allPositions[i]] = '';\r\n                for (const pos of positions) \r\n                    if (!allPositions.includes(pos))\r\n                        allPositions.push(pos);\r\n            }\r\n        }\r\n        if (i < allPositions.length - 1) i++;\r\n        else return;\r\n    }\r\n}\r\n\r\nexport function CountBombs (index, minesPositions, rowsNumber, columnsNumber) {\r\n    const cssClasses = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'];\r\n    // index = row * columnsNumber + column\r\n    // index/columnsNumber = row (quotient) + column/columnsNumber (remainder)\r\n    const rowInit = Math.floor(index / columnsNumber);\r\n    const columnInit = index % columnsNumber;\r\n    let positions = [];\r\n\r\n    for (let row = rowInit - 1; row < rowInit + 2; row++) {\r\n        if (row < 0 || row > rowsNumber - 1) continue;\r\n        for (let column = columnInit -1; column < columnInit + 2; column++) {\r\n            if (row === rowInit && column === columnInit) continue;\r\n            if (column < 0 || column > columnsNumber - 1) continue;\r\n            positions.push(row * columnsNumber + column);\r\n        }\r\n    }\r\n\r\n    // Count bombs in adjacent squares\r\n    let bombs = 0;\r\n    for (const position of positions) if (minesPositions.includes(position)) bombs++;\r\n\r\n    // return the number of bombs, the updated cssClass and the valid positions around index\r\n    return([bombs, 'clicked ' + cssClasses[bombs], positions]);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Board from './board';\r\nimport GameInfo from './gameinfo';\r\nimport Menu from './menu';\r\nimport OverScreen from './overscreen';\r\nimport * as screens from './screens';\r\nimport * as sqr from './squaresf';\r\nimport './index.css';\r\n\r\nclass Game extends React.Component {\r\n\r\n    static timerID = null;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n        const rowsNumber = props.rows;\r\n        const columnsNumber = props.columns;\r\n\r\n        // sorting mines positions\r\n        const minesPositions = Array(props.minesNumber);\r\n        for (let i = 0; i < props.minesNumber; i++) {\r\n            const index = Math.floor(Math.random() * rowsNumber * columnsNumber);\r\n            if (!minesPositions.includes(index)) minesPositions[i] = index;\r\n            else i--;\r\n        }\r\n\r\n        // sorting bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // setting initial state\r\n        this.state = {\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            minesPositions,\r\n            initialTime: props.time,\r\n            time: props.time,\r\n            rowsNumber,\r\n            columnsNumber,\r\n            bombSymbol: bombs[index],\r\n            phase: 'paused',\r\n            level: 'easy',\r\n            msg: '',\r\n        };\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    componentDidMount () { Game.timerID = null; }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () { if (Game.timerID) clearInterval(Game.timerID); }\r\n\r\n    restartGame (rowsNumber = null, columnsNumber = null, minesNumber = null) {\r\n        // reseting size\r\n        if (!rowsNumber) rowsNumber = this.state.rowsNumber;\r\n        if (!columnsNumber) columnsNumber = this.state.columnsNumber;\r\n        if (!minesNumber) minesNumber = this.state.minesPositions.length;\r\n\r\n        // sorting mines positions\r\n        const minesPositions = Array(minesNumber);\r\n        for (let i = 0; i < minesNumber; i++) {\r\n            const index = Math.floor(Math.random() * rowsNumber * columnsNumber);\r\n            if (!minesPositions.includes(index)) minesPositions[i] = index;\r\n            else i--;\r\n        }\r\n\r\n        // resseting timer\r\n        const time = this.state.initialTime;\r\n        if (Game.timerID) clearInterval(Game.timerID);\r\n        Game.timerID = null;\r\n\r\n        // sorting new bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // reseting state\r\n        this.setState({\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            minesPositions,\r\n            time,\r\n            rowsNumber,\r\n            columnsNumber,\r\n            bombSymbol: bombs[index],\r\n            phase: 'paused',\r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    clickHandle (mouse, index) {\r\n        let squaresValues = this.state.squaresValues.slice();\r\n        let squaresCSS = this.state.squaresCSS.slice();\r\n        let phase = this.state.phase;\r\n        let msg = '';\r\n        let positions = [];\r\n\r\n        if (phase === 'game-over' || !this.state.time) return;\r\n\r\n        // If it is the first click, initializes clock\r\n        if (phase === 'paused') {\r\n            phase = 'playing'\r\n            if (!Game.timerID) Game.timerID = setInterval(() => {\r\n                let time = this.state.time;\r\n                time--;\r\n                this.setState({ time });\r\n                // if time is up: game over\r\n                if (time <= 0) {\r\n                    this.setState({ phase: 'game-over', msg: 'Time is Over!' });\r\n                    clearInterval(Game.timerID);\r\n                }\r\n            },1000);\r\n        }\r\n\r\n        // if clicked with left button\r\n        if (mouse.button === 0) {\r\n            // if square was already clicked, then return.\r\n            if (squaresCSS[index]) return;\r\n\r\n            // if square is a bomb, game-over\r\n            if (this.state.minesPositions.includes(index)) {\r\n                sqr.OpenAllSquares(squaresValues, squaresCSS, this.state.minesPositions,\r\n                    this.state.bombSymbol, this.state.rowsNumber, this.state.columnsNumber);\r\n                squaresCSS[index] = 'clicked'\r\n                phase = 'game-over';\r\n                msg = 'Exploded!!!';\r\n                clearInterval(Game.timerID);\r\n            // if square is not a bombSymbol, count bombs around the square\r\n            // Update value with the number of bombs and squaresCSS with\r\n            // 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            } else {\r\n                [squaresValues[index], squaresCSS[index], positions] =\r\n                    sqr.CountBombs(index,\r\n                        this.state.minesPositions,\r\n                        this.state.rowsNumber,\r\n                        this.state.columnsNumber);\r\n                if (squaresValues[index] === 0) {\r\n                    squaresValues[index] = '';\r\n                // if square has no bombSymbol around, open all the squares around\r\n                    for (const position of positions)\r\n                        sqr.OpenSquares(position, squaresValues, squaresCSS,\r\n                        this.state.minesPositions,\r\n                        this.state.rowsNumber,\r\n                        this.state.columnsNumber);\r\n                }\r\n            }\r\n        // if clicked with right button\r\n        } else if (mouse.button === 2) {\r\n            // if the button is clicked, return\r\n            if (squaresCSS[index] && squaresCSS[index] !== 'saved') return;\r\n\r\n            // Cycle through the symbols '' (nothing), '\\u2691' (saved) and\r\n            // '?' (maybe) with each click\r\n            squaresValues[index] = squaresValues[index] === '' ? '\\u2691' :\r\n                squaresValues[index] === '\\u2691' ? '?' : '';\r\n            // set the corresponding squaresCSS if the 'saved' symbol is used\r\n            if (squaresValues[index] === '\\u2691') squaresCSS[index] = 'saved';\r\n            else squaresCSS[index] = '';\r\n        }\r\n\r\n        // Check if only the bombSymbol squares are not clicked, if yes -> Victory!\r\n        if (phase !=='game-over' && this.state.minesPositions.length ===\r\n            squaresCSS.filter(x => x.indexOf('clicked') === -1).length) {\r\n            phase = 'game-over';\r\n            msg = 'Victory!';\r\n            clearInterval(Game.timerID);\r\n            sqr.OpenAllSquares(squaresValues, squaresCSS, this.state.minesPositions,\r\n                this.state.bombSymbol, this.state.rowsNumber, this.state.columnsNumber, true);\r\n        }\r\n\r\n        // save the current state\r\n        this.setState({ squaresValues, squaresCSS, phase, msg });\r\n    }\r\n\r\n    levelControl (element) {\r\n        const level = element.currentTarget.value;\r\n        let rows = 13; // level Hard\r\n        let columns = 18; // level Hard\r\n        let minesNumber = 40; // level Hard 17%\r\n\r\n        if (level === 'easy') {\r\n            rows = 9;\r\n            columns = 9;\r\n            minesNumber = 10; // 12%\r\n        }\r\n        if (level === 'intermediate') {\r\n            rows = 12;\r\n            columns = 12;\r\n            minesNumber = 22; // 15%\r\n        }\r\n\r\n        document.documentElement.style.setProperty('--width', columns*40+'px');\r\n        document.documentElement.style.setProperty('--height', rows*40+'px');\r\n        this.setState({ level });\r\n        this.restartGame(rows, columns, minesNumber);\r\n    }\r\n\r\n    render () {\r\n        const minesNumber = this.state.minesPositions.length;\r\n        const squaresCSS = this.state.squaresCSS;\r\n        // Count the number of mines already discovered (saved)\r\n        const bombsNumber = minesNumber - squaresCSS.filter(x => x === 'saved').length\r\n            - squaresCSS.filter(x => x === 'saved-true').length;\r\n\r\n        let popup = null;\r\n        if (this.state.msg === 'Victory!') popup =\r\n            <OverScreen autoFadeOut={true} time={1} content={screens.victory}/>\r\n        if (this.state.msg === 'Time is Over!') popup =\r\n            <OverScreen autoFadeOut={true} time={1} content={screens.time}/>\r\n        if (this.state.msg === 'Exploded!!!') popup =\r\n            <OverScreen autoFadeOut={true} time={3} content={screens.explode}/>\r\n        \r\n        return (<>\r\n            <OverScreen autoFadeOut={false} time={5} content={screens.initial}/>\r\n            {popup}\r\n            <div className=\"title\">Minesweeper</div>\r\n            <div className=\"container\">\r\n                <div className=\"game-area\">\r\n                    <GameInfo bombsNumber={bombsNumber} time={this.state.time}\r\n                        msg={this.state.msg}/>\r\n                    <div className=\"game\">\r\n                        <Board squaresValues={this.state.squaresValues}\r\n                            squaresCSS={this.state.squaresCSS}\r\n                            rowsNumber={this.state.rowsNumber}\r\n                            columnsNumber={this.state.columnsNumber}\r\n                            clickHandle={(mouse, i) => this.clickHandle(mouse, i)}/>\r\n                    </div>\r\n                    <Menu level={this.state.level}\r\n                        levelControl={(element) => this.levelControl(element)}/>\r\n                    <div className=\"restart\">\r\n                        <button className=\"restart-button\"\r\n                            onClick={() => this.restartGame()}>\r\n                            Restart Game\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game rows={9} columns={9} minesNumber={10} time={120}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}