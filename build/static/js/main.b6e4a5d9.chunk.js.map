{"version":3,"sources":["board.js","gameinfo.js","menu.js","overscreen.js","squaresf.js","index.js"],"names":["Square","props","cssClass","squareCSS","value","squareValue","time","holdTime","onClickNHold","clickHandle","onEnd","e","enought","button","className","onContextMenu","preventDefault","BoardRow","columns","squaresValues","map","column","squaresCSS","row","toString","Board","rowsNumber","columnsNumber","rows","Array","initIndex","endIndex","slice","GameInfo","Zerofill","bombsNumber","msg","number","width","sign","length","join","LevelOption","label","level","toUpperCase","type","name","id","checked","onChange","element","levelControl","htmlFor","Menu","radios","index","Image","img","initialState","activeCSS","deactiveCSS","alt","src","Button","btn","onClick","text","FirstLine","txt","Line","Text","content","push","idx","line","key","Division","div","renderDIV","OverScreen","state","isVisible","autoFadeOut","invisibleTimer","fadeOutTimer","clearInterval","this","setState","turnInvisible","setTimeout","fadeOut","React","Component","parentKey","item","connectionURL","startNewGame","body","a","requestOptions","method","headers","JSON","stringify","fetch","response","json","data","console","log","OpenSquare","restartGame","Game","minesNumber","cookies","gameID","get","fill","initialTime","phase","timerID","status","sqr","remove","set","setInterval","updates","exploded","pop","filter","x","indexOf","win","currentTarget","document","documentElement","style","setProperty","popup","screens","i","GameApp","withCookies","ReactDOM","render","CookiesProvider","getElementById"],"mappings":"gRAEA,SAASA,EAAQC,GACb,IAAMC,EAAWD,EAAME,UAAY,UAC/BC,EAAQH,EAAMI,YASlB,OACI,cAAC,IAAD,CAAYC,KAAML,EAAMM,SAAUC,aAHnB,kBAAMP,EAAMQ,YAAY,UAGqBC,MAT5C,SAACC,EAAGC,GACfA,IACgB,IAAbD,EAAEE,OAAcZ,EAAMQ,YAAY,QAChB,IAAbE,EAAEE,QAAcZ,EAAMQ,YAAY,WAM/C,SACI,wBAAQK,UAAWZ,EAAUa,cAAe,SAACJ,GAAD,OAAOA,EAAEK,kBAArD,SACKZ,MAMjB,SAASa,EAAUhB,GAEf,IAAMiB,EAAUjB,EAAMkB,cAAcC,KAAI,SAACf,EAAagB,GAAd,OACpC,cAACrB,EAAD,CACIO,SAAUN,EAAMM,SAChBF,YAAaA,EACbF,UAAWF,EAAMqB,WAAWD,GAC5BZ,YAAa,SAACI,GAAD,OAAYZ,EAAMQ,YAAYI,EAAQQ,KAJ1C,UAAYpB,EAAMsB,IAAIC,WAAa,IAAMH,EAAOG,eAOjE,OACI,qBAAKV,UAAU,YAAf,SACKI,IAKE,SAASO,EAAOxB,GAM3B,IALA,IAAMyB,EAAazB,EAAMyB,WACnBC,EAAgB1B,EAAM0B,cAEtBC,EAAOC,MAAMH,GAJe,WAMzBH,GACL,IAAMO,EAAYP,EAAMI,EAClBI,EAAWD,EAAYH,EACvBR,EAAgBlB,EAAMkB,cAAca,MAAMF,EAAWC,GACrDT,EAAarB,EAAMqB,WAAWU,MAAMF,EAAWC,GACrDH,EAAKL,GAAO,cAACN,EAAD,CACRM,IAAKA,EACLhB,SAAUN,EAAMM,SAChBY,cAAeA,EACfG,WAAYA,EACZb,YAAa,SAACI,EAAQQ,GAAT,OAAoBpB,EAAMQ,YAAYI,EAAQiB,EAAYT,KALhD,OAASE,EAAIC,aALnCD,EAAM,EAAGA,EAAMG,EAAYH,IAAQ,EAAnCA,GAaT,OACI,qBAAKT,UAAU,aAAf,SACKc,IC5DE,SAASK,EAAUhC,GAC9B,OACI,sBAAKa,UAAU,iBAAf,UACI,qBAAKA,UAAU,aAAf,SACI,4BAAIoB,EAASjC,EAAMkC,YAAY,OAEnC,qBAAKrB,UAAU,YAAf,SACI,4BAAIb,EAAMmC,QAEd,qBAAKtB,UAAU,aAAf,SACI,4BAAIoB,EAASjC,EAAMK,KAAK,UAMxC,SAAS4B,EAAUG,EAAOC,GACtB,IAAIC,EAAO,GAQX,OANIF,EAAS,IACTA,IAAW,EACXE,EAAO,MAGXD,GAASD,EAAOb,WAAWgB,OAAS,GACvB,EACFD,EAAO,IAAIV,MAAMS,GAAOG,KAAK,KAAOJ,EAGxCE,EAAOF,EAAS,GC7B3B,SAASK,EAAazC,GAClB,IACM0C,EAAQ1C,EAAM2C,MAAM,GAAGC,cAAgB5C,EAAM2C,MAAMZ,MAAM,GAE/D,OACI,sBAAKlB,UAAU,QAAf,UACI,uBAAOgC,KAAK,QAAQC,KAAK,QACzBC,GAAI/C,EAAM2C,MACVxC,MAAOH,EAAM2C,MACbK,QAAShD,EAAMgD,QACfC,SATS,SAACC,GAAD,OAAalD,EAAMmD,aAAaD,MAUzC,wBAAOE,QAASpD,EAAM2C,MAAtB,cAA+BD,QAK5B,SAASW,EAAMrD,GAC1B,IAAMmD,EAAe,SAACD,GAAD,OAAalD,EAAMmD,aAAaD,IAG/CI,EAFS,CAAC,OAAQ,eAAgB,QAElBnC,KAAI,SAACwB,EAAOY,GAAR,OACtB,cAACd,EAAD,CACAE,MAAOA,EACPK,QAAShD,EAAM2C,QAAUA,EACzBQ,aAAcA,GAHI,MAAQI,EAAMhC,eAMpC,OACI,qBAAKV,UAAU,aAAf,SACKyC,IC3Bb,SAASE,EAAOxD,GACZ,IAAMyD,EAAMzD,EAAMyD,IAClB,OACI,qBAAK5C,UAAWb,EAAM0D,aAAeD,EAAIE,UAAYF,EAAIG,YAAaC,IAAKJ,EAAII,IAAKC,IAAKL,EAAIK,MAIrG,SAASC,EAAQ/D,GACb,IAAMgE,EAAMhE,EAAMgE,IAClB,OACI,wBAAQnD,UAAWb,EAAM0D,aAAeM,EAAIL,UAAYK,EAAIJ,YAAaK,QAASjE,EAAMQ,YAAxF,SACKwD,EAAIE,OAKjB,SAASC,EAAWnE,GAAS,OAAQ,mCAAGA,EAAMoE,MAE9C,SAASC,EAAMrE,GAAS,OAAQ,qCAAE,uBAAK,uBAAMA,EAAMoE,OAEnD,SAASE,EAAMtE,GACX,IAAMkE,EAAOlE,EAAMoE,IACbG,EAAU,GAEhBA,EAAQC,KAAK,cAACL,EAAD,CACTC,IAAKF,EAAKK,QAAQ,IADOvE,EAAMuD,MAAQ,YAG3C,IAAK,IAAIkB,EAAM,EAAGA,EAAMP,EAAKK,QAAQhC,OAAQkC,IAAO,CAChD,IAAMC,EAAOR,EAAKK,QAAQE,GACpBE,EAAM3E,EAAMuD,MAAQ,SAAWkB,EAAIlD,WACzCgD,EAAQC,KAAK,cAACH,EAAD,CAAgBD,IAAKM,GAAVC,IAG5B,OAAQ,mCAAGJ,IAGf,SAASK,EAAU5E,GACf,IAAM6E,EAAM7E,EAAM6E,IAEZN,EAAUO,EAAUD,EAAIN,QAASvE,EAAM0D,aAAc1D,EAAMQ,YAAaR,EAAMuD,OAEpF,OACI,qBAAK1C,UAAWb,EAAM0D,aAAemB,EAAIlB,UAAYkB,EAAIjB,YAAzD,SACKW,I,IAKQQ,E,kDAKjB,WAAa/E,GAAQ,IAAD,8BAChB,cAAMA,IACDgF,MAAQ,CACTtB,cAAc,EACduB,WAAW,EACXC,YAAalF,EAAMkF,YACnB7E,KAAmB,IAAbL,EAAMK,KACZkE,QAASvE,EAAMuE,SAPH,E,gEAahBQ,EAAWI,eAAiB,KAC5BJ,EAAWK,aAAe,O,6CAKtBL,EAAWI,gBAAgBE,cAAcN,EAAWI,gBACpDJ,EAAWK,cAAcC,cAAcN,EAAWK,gB,sCAItDE,KAAKC,SAAS,CAAEN,WAAW,M,gCAGnB,IAAD,OACPK,KAAKC,SAAS,CAAE7B,cAAc,EAAOwB,aAAa,IAC7CH,EAAWI,eAEXG,KAAKE,gBADNT,EAAWI,eAAiBM,YAAW,kBAAM,EAAKD,kBAAiBF,KAAKN,MAAM3E,Q,+BAI3E,IAAD,OAEN,IAAKiF,KAAKN,MAAMC,UAAW,OAAO,KAElC,IAIMV,EAAUO,EAJJQ,KAAKN,MAAMT,QAAQxC,QAEVuD,KAAKN,MAAMtB,cADZ,kBAAM,EAAKgC,aAQ/B,OAHIJ,KAAKN,MAAME,cAAgBH,EAAWK,eACtCL,EAAWK,aAAeK,YAAW,kBAAM,EAAKC,YAAWJ,KAAKN,MAAM3E,OAElE,yCAAIkE,EAAJ,W,GApDwBoB,IAAMC,WAwD9C,SAASd,EAAWD,EAAKnB,EAAclD,GAGnC,IAHmE,IAAnBqF,EAAkB,uDAAR,OACtDtB,EAAU,GAELE,EAAM,EAAGA,EAAMI,EAAItC,OAAQkC,IAAO,CACvC,IAAMqB,EAAOjB,EAAIJ,GACXE,EAAMkB,EAAY,IAAMC,EAAKjD,KAAO,IAAM4B,EAAIlD,WAClC,SAAduE,EAAKjD,MAAiB0B,EAAQC,KAAK,cAACF,EAAD,CAAgBf,MAAOoB,EAAKP,IAAK0B,GAAtBnB,IAChC,QAAdmB,EAAKjD,MAAgB0B,EAAQC,KAAK,cAAChB,EAAD,CAAiBE,aAAcA,EAAcD,IAAKqC,GAAtCnB,IAChC,QAAdmB,EAAKjD,MAAgB0B,EAAQC,KAAK,cAACT,EAAD,CAAkBL,aAAcA,EAAcM,IAAK8B,EAAMtF,YAAaA,GAAzDmE,IACjC,QAAdmB,EAAKjD,MAAgB0B,EAAQC,KAAK,cAACI,EAAD,CAAoBrB,MAAOoB,EAAKjB,aAAcA,EAAcmB,IAAKiB,EAAMtF,YAAaA,GAArEmE,IAGzD,OAAOJ,EApEUQ,EAEVI,eAAiB,KAFPJ,EAGVK,aAAe,K,YCnDpBW,EAAgB,wCAEf,SAAeC,EAAtB,kC,4CAAO,WAA6BC,GAA7B,mBAAAC,EAAA,6DACGC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BJ,KAAMK,KAAKC,UAAUN,IAJtB,SAMoBO,MAAM,GAAD,OAAIT,EAAJ,SAA0BI,GANnD,cAMGM,EANH,gBAOgBA,EAASC,OAPzB,cAOGC,EAPH,OAQHC,QAAQC,IAAIF,EAAKxE,KARd,kBASIwE,GATJ,4C,sBAYA,SAAeG,EAAtB,kC,4CAAO,WAA2Bb,GAA3B,mBAAAC,EAAA,6DACGC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BJ,KAAMK,KAAKC,UAAUN,IAJtB,SAOoBO,MAAM,GAAD,OAAIT,EAAJ,eAAgCI,GAPzD,cAOGM,EAPH,gBAQgBA,EAASC,OARzB,cAQGC,EARH,OASHC,QAAQC,IAAIF,EAAKxE,KATd,kBAUIwE,GAVJ,4C,sBAaA,SAAeI,EAAtB,kC,4CAAO,WAA4Bd,GAA5B,mBAAAC,EAAA,6DACGC,EAAiB,CACnBC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BJ,KAAMK,KAAKC,UAAUN,IAJtB,SAMoBO,MAAM,GAAD,OAAIT,EAAJ,YAA6BI,GANtD,cAMGM,EANH,gBAOgBA,EAASC,OAPzB,cAOGC,EAPH,OAQHC,QAAQC,IAAIF,EAAKxE,KARd,kBASIwE,GATJ,4C,iCCjBDK,E,kDAOF,WAAahH,GAAQ,IAAD,sBAChB,cAAOA,GADS,IAETyB,EAA0DzB,EAA1DyB,WAAYC,EAA8C1B,EAA9C0B,cAAeuF,EAA+BjH,EAA/BiH,YAAa5G,EAAkBL,EAAlBK,KAAMC,EAAYN,EAAZM,SAC7C4G,EAAY,EAAKlH,MAAjBkH,QAHQ,OAMhB,EAAKlC,MAAQ,CACTmC,OAAQD,EAAQE,IAAI,WAAa,KACjC3F,aACAC,gBACAuF,cACA/F,cAAeU,MAAMH,EAAaC,GAAe2F,KAAK,IACtDhG,WAAYO,MAAMH,EAAaC,GAAe2F,KAAK,IACnDC,YAAajH,EACbA,OACAC,WACAiH,MAAO,SACP5E,MAAO,OACPR,IAAK,IAlBO,E,mMAwBhB6E,EAAKQ,QAAU,K,EAE0ClC,KAAKN,MAAvDmC,E,EAAAA,OAAQ1F,E,EAAAA,WAAYC,E,EAAAA,cAAeuF,E,EAAAA,YACtCR,EAAW,CAACgB,OAAQ,OAEpBN,E,gCAA0BO,EAAgB,CAACP,SAAQ1F,aAAYC,gBAAeuF,gB,OAArER,E,iBACRU,GAA8B,WAApBV,EAASgB,O,wBACZP,EAAY5B,KAAKtF,MAAjBkH,SACAS,S,UACiBD,EAAiB,CAACjG,aAAYC,gBAAeuF,gB,iBAA9DE,E,EAAAA,OACRD,EAAQU,IAAI,SAAUT,GACtB7B,KAAKC,SAAS,CAAE4B,W,oJAKMH,EAAKQ,SAASnC,cAAc2B,EAAKQ,W,6KAE5C/F,E,+BAAa,KAAMC,E,+BAAgB,MAAMuF,E,+BAAc,QACpDA,EAAc3B,KAAKN,MAAMiC,aACtCxF,IAAYA,EAAa6D,KAAKN,MAAMvD,YACpCC,IAAeA,EAAgB4D,KAAKN,MAAMtD,e,SAEzCgG,EAAgB,CAACP,OAAQ7B,KAAKN,MAAMmC,OAAQ1F,aAAYC,gBAAeuF,gB,OAGvE5G,EAAOiF,KAAKN,MAAMsC,YACpBN,EAAKQ,SAASnC,cAAc2B,EAAKQ,SACrCR,EAAKQ,QAAU,KAGflC,KAAKC,SAAS,CACV9D,aACAC,gBACAuF,cACA/F,cAAeU,MAAMH,EAAaC,GAAe2F,KAAK,IACtDhG,WAAYO,MAAMH,EAAaC,GAAe2F,KAAK,IACnDhH,OACAkH,MAAO,SACPpF,IAAK,K,kLAIMvB,EAAQ2C,G,+FACnBrC,EAAgBoE,KAAKN,MAAM9D,cAAca,QACzCV,EAAaiE,KAAKN,MAAM3D,WAAWU,QACjCoF,EAAS7B,KAAKN,MAAMmC,OACpBF,EAAc3B,KAAKN,MAAMiC,YAC3BM,EAAQjC,KAAKN,MAAMuC,MACnBpF,EAAM,GAEI,cAAVoF,GAA0BjC,KAAKN,MAAM3E,MAASO,E,oDAGpC,WAAV2G,IACAA,EAAQ,UACHP,EAAKQ,UAASR,EAAKQ,QAAUK,aAAY,WAC1C,IAAIxH,EAAO,EAAK2E,MAAM3E,KACtBA,IACA,EAAKkF,SAAS,CAAElF,SAEZA,GAAQ,IACR,EAAKkF,SAAS,CAAEgC,MAAO,YAAapF,IAAK,kBACzCkD,cAAc2B,EAAKQ,YAEzB,OAIS,SAAX5G,E,qBAEIS,EAAWkC,G,oEAEImE,EAAe,CAACP,SAAQ5D,QAAOuE,QAASd,EAAKc,U,QAA1DnB,E,OACNK,EAAKc,QAAU,GACf5G,EAAgByF,EAAKzF,cACrBG,EAAasF,EAAKtF,WAGdsF,EAAKoB,WACL1G,EAAWkC,GAAS,UACpBgE,EAAQ,YACRpF,EAAM,cACNkD,cAAc2B,EAAKQ,U,2BAOL,UAAX5G,E,qBAEHS,EAAWkC,IAAgC,UAAtBlC,EAAWkC,G,mDAIpCrC,EAAcqC,GAAkC,KAAzBrC,EAAcqC,GAAgB,SACxB,WAAzBrC,EAAcqC,GAAsB,IAAM,GAEjB,WAAzBrC,EAAcqC,GAAqBlC,EAAWkC,GAAS,QACtDlC,EAAWkC,GAAS,GACrByD,EAAKc,QAAQvF,OAAS,GAAKyE,EAAKc,QAAQd,EAAKc,QAAQvF,OAAS,GAAGgB,QAAUA,GAAOyD,EAAKc,QAAQE,MACnGhB,EAAKc,QAAQtD,KAAK,CAACjB,QAAOnD,YAAac,EAAcqC,GAAQrD,UAAWmB,EAAWkC,K,WAI1E,cAATgE,GAAwBN,IAAgB5F,EAAW4G,QAAO,SAAAC,GAAC,OAA8B,IAA1BA,EAAEC,QAAQ,cAAmB5F,O,wBAC5FgF,EAAQ,YACRpF,EAAM,WACNkD,cAAc2B,EAAKQ,S,UACAE,EAAe,CAACP,SAAQ5D,QAAOuE,QAASd,EAAKc,QAASM,KAAK,I,QAAxEzB,E,OACNK,EAAKc,QAAU,GACf5G,EAAgByF,EAAKzF,cACrBG,EAAasF,EAAKtF,W,QAItBiE,KAAKC,SAAS,CAAErE,gBAAeG,aAAYkG,QAAOpF,Q,6IAGxCe,GACV,IAAMP,EAAQO,EAAQmF,cAAclI,MAChCwB,EAAO,GACPV,EAAU,GACVgG,EAAc,GAEJ,SAAVtE,IACAhB,EAAO,EACPV,EAAU,EACVgG,EAAc,IAEJ,iBAAVtE,IACAhB,EAAO,GACPV,EAAU,GACVgG,EAAc,IAGlBqB,SAASC,gBAAgBC,MAAMC,YAAY,UAAmB,GAARxH,EAAW,MACjEqH,SAASC,gBAAgBC,MAAMC,YAAY,WAAiB,GAAL9G,EAAQ,MAC/D2D,KAAKC,SAAS,CAAE5C,UAChB2C,KAAKyB,YAAYpF,EAAMV,EAASgG,K,+BAGzB,IAAD,OACAA,EAAc3B,KAAKN,MAAMiC,YACzB5F,EAAaiE,KAAKN,MAAM3D,WAExBa,EAAc+E,EAAc5F,EAAW4G,QAAO,SAAAC,GAAC,MAAU,UAANA,KAAe3F,OAClElB,EAAW4G,QAAO,SAAAC,GAAC,MAAU,eAANA,KAAoB3F,OAE7CmG,EAAQ,KAQZ,MAPuB,aAAnBpD,KAAKN,MAAM7C,MAAoBuG,EAC/B,cAAC,EAAD,CAAYxD,aAAa,EAAM7E,KAAM,EAAGkE,QAASoE,OAC9B,kBAAnBrD,KAAKN,MAAM7C,MAAyBuG,EACpC,cAAC,EAAD,CAAYxD,aAAa,EAAM7E,KAAM,EAAGkE,QAASoE,OAC9B,gBAAnBrD,KAAKN,MAAM7C,MAAuBuG,EAClC,cAAC,EAAD,CAAYxD,aAAa,EAAM7E,KAAM,EAAGkE,QAASoE,OAE7C,qCACJ,cAAC,EAAD,CAAYzD,aAAa,EAAO7E,KAAM,EAAGkE,QAASoE,MACjDD,EACD,qBAAK7H,UAAU,QAAf,yBACA,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAACmB,EAAD,CAAUE,YAAaA,EAAa7B,KAAMiF,KAAKN,MAAM3E,KACjD8B,IAAKmD,KAAKN,MAAM7C,MACpB,qBAAKtB,UAAU,OAAf,SACI,cAACW,EAAD,CAAON,cAAeoE,KAAKN,MAAM9D,cAC7BG,WAAYiE,KAAKN,MAAM3D,WACvBI,WAAY6D,KAAKN,MAAMvD,WACvBC,cAAe4D,KAAKN,MAAMtD,cAC1BpB,SAAUgF,KAAKN,MAAM1E,SACrBE,YAAa,SAACI,EAAQgI,GAAT,OAAe,EAAKpI,YAAYI,EAAQgI,QAE7D,cAACvF,EAAD,CAAMV,MAAO2C,KAAKN,MAAMrC,MACpBQ,aAAc,SAACD,GAAD,OAAa,EAAKC,aAAaD,MACjD,qBAAKrC,UAAU,UAAf,SACI,wBAAQA,UAAU,iBACdoD,QAAS,kBAAM,EAAK8C,eADxB,wC,GAhNLpB,IAAMC,WAAnBoB,EAEKQ,QAAU,KAFfR,EAGKc,QAAU,GAwNrB,IAAMe,EAAUC,YAAY9B,GAE5B+B,IAASC,OACL,cAACC,EAAA,EAAD,UACI,cAACJ,EAAD,CAASpH,WAAY,EAAGC,cAAe,EAAGuF,YAAa,GAAI5G,KAAM,IAAKC,SAAU,OAEpFgI,SAASY,eAAe,U","file":"static/js/main.b6e4a5d9.chunk.js","sourcesContent":["import ClickNHold from 'react-click-n-hold';\r\n\r\nfunction Square (props) {\r\n    const cssClass = props.squareCSS + ' square';\r\n    let value = props.squareValue;\r\n    const clickHandle = (e, enought) => {\r\n        if (!enought) {\r\n            if (e.button === 0) props.clickHandle('left');\r\n            else if (e.button === 2) props.clickHandle('right');\r\n        }\r\n    }\r\n    const rightClick = () => props.clickHandle('right');\r\n\r\n    return (\r\n        <ClickNHold time={props.holdTime} onClickNHold={rightClick} onEnd={clickHandle}>\r\n            <button className={cssClass} onContextMenu={(e) => e.preventDefault()}>\r\n                {value}\r\n            </button>\r\n        </ClickNHold>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n\r\n    const columns = props.squaresValues.map((squareValue, column) =>\r\n        <Square key={'square-' + props.row.toString() + '-' + column.toString()}\r\n            holdTime={props.holdTime}\r\n            squareValue={squareValue}\r\n            squareCSS={props.squaresCSS[column]}\r\n            clickHandle={(button) => props.clickHandle(button, column)}/>\r\n    );\r\n\r\n    return(\r\n        <div className=\"board-row\">\r\n            {columns}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Board (props) {\r\n    const rowsNumber = props.rowsNumber;\r\n    const columnsNumber = props.columnsNumber;\r\n\r\n    const rows = Array(rowsNumber);\r\n\r\n    for (let row = 0; row < rowsNumber; row++) {\r\n        const initIndex = row * columnsNumber;\r\n        const endIndex = initIndex + columnsNumber;\r\n        const squaresValues = props.squaresValues.slice(initIndex, endIndex);\r\n        const squaresCSS = props.squaresCSS.slice(initIndex, endIndex);\r\n        rows[row] = <BoardRow key={'row-' + row.toString()}\r\n            row={row}\r\n            holdTime={props.holdTime}\r\n            squaresValues={squaresValues}\r\n            squaresCSS={squaresCSS}\r\n            clickHandle={(button, column) => props.clickHandle(button, initIndex + column)}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-board\">\r\n            {rows}\r\n        </div>\r\n    );\r\n}","export default function GameInfo (props) {\r\n    return (\r\n        <div className=\"game-info game\">\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.bombsNumber,3)}</p>\r\n            </div>\r\n            <div className=\"game-over\">\r\n                <p>{props.msg}</p>\r\n            </div>\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.time,3)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Zerofill (number,width) {\r\n    let sign = '';\r\n\r\n    if (number < 0) {\r\n        number *= -1;\r\n        sign = '-';\r\n    }\r\n\r\n    width -= number.toString().length - 1;\r\n    if ( width > 0 )\r\n        return sign + new Array(width).join('0') + number;\r\n    \r\n    // Always return a string\r\n    return sign + number + \"\";\r\n}","function LevelOption (props) {\r\n    const onChange = (element) => props.levelControl(element);\r\n    const label = props.level[0].toUpperCase() + props.level.slice(1);\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <input type=\"radio\" name=\"level\"\r\n            id={props.level}\r\n            value={props.level}\r\n            checked={props.checked}\r\n            onChange={onChange}/>\r\n            <label htmlFor={props.level}> {label}</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Menu (props) {\r\n    const levelControl = (element) => props.levelControl(element);\r\n    const levels = ['easy', 'intermediate', 'hard'];\r\n\r\n    const radios = levels.map((level, index) =>\r\n        <LevelOption key={'op-' + index.toString()}\r\n        level={level}\r\n        checked={props.level === level}\r\n        levelControl={levelControl}/>\r\n    );\r\n\r\n    return (\r\n        <div className=\"level game\">\r\n            {radios}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nfunction Image (props) {\r\n    const img = props.img;\r\n    return (\r\n        <img className={props.initialState ? img.activeCSS : img.deactiveCSS} alt={img.alt} src={img.src}/>\r\n    );\r\n}\r\n\r\nfunction Button (props) {\r\n    const btn = props.btn;\r\n    return (\r\n        <button className={props.initialState ? btn.activeCSS : btn.deactiveCSS} onClick={props.clickHandle}>\r\n            {btn.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction FirstLine (props) { return (<>{props.txt}</>); }\r\n\r\nfunction Line (props) { return (<><br/><br/>{props.txt}</>); }\r\n\r\nfunction Text (props) {\r\n    const text = props.txt;\r\n    const content = [];\r\n\r\n    content.push(<FirstLine key={props.index + '-Line-0'}\r\n        txt={text.content[0]}/>);\r\n\r\n    for (let idx = 1; idx < text.content.length; idx++) {\r\n        const line = text.content[idx];\r\n        const key = props.index + '-Line-' + idx.toString();\r\n        content.push(<Line key={key} txt={line}/>);\r\n    }\r\n\r\n    return (<>{content}</>);\r\n}\r\n\r\nfunction Division (props) {\r\n    const div = props.div;\r\n \r\n    const content = renderDIV(div.content, props.initialState, props.clickHandle, props.index);\r\n\r\n    return (\r\n        <div className={props.initialState ? div.activeCSS : div.deactiveCSS}>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default class OverScreen extends React.Component {\r\n\r\n    static invisibleTimer = null;\r\n    static fadeOutTimer = null;\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            initialState: true,\r\n            isVisible: true,\r\n            autoFadeOut: props.autoFadeOut,\r\n            time: props.time * 1000,\r\n            content: props.content,\r\n        }\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    componentDidMount () {\r\n        OverScreen.invisibleTimer = null;\r\n        OverScreen.fadeOutTimer = null;\r\n    }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () {\r\n        if (OverScreen.invisibleTimer) clearInterval(OverScreen.invisibleTimer);\r\n        if (OverScreen.fadeOutTimer) clearInterval(OverScreen.fadeOutTimer);\r\n    }\r\n\r\n    turnInvisible () {\r\n        this.setState({ isVisible: false });\r\n    }\r\n\r\n    fadeOut () {\r\n        this.setState({ initialState: false, autoFadeOut: false});\r\n        if (!OverScreen.invisibleTimer)\r\n            OverScreen.invisibleTimer = setTimeout(() => this.turnInvisible(), this.state.time);\r\n        else this.turnInvisible();\r\n    }\r\n\r\n    render () {\r\n\r\n        if (!this.state.isVisible) return null;\r\n\r\n        const div = this.state.content.slice();\r\n        const clickHandle = () => this.fadeOut();\r\n        const initialState = this.state.initialState;\r\n\r\n        const content = renderDIV(div, initialState, clickHandle);\r\n\r\n        if (this.state.autoFadeOut && !OverScreen.fadeOutTimer)\r\n            OverScreen.fadeOutTimer = setTimeout(() => this.fadeOut(), this.state.time);\r\n\r\n        return (<> {content} </>);\r\n    }\r\n}\r\n\r\nfunction renderDIV (div, initialState, clickHandle, parentKey='init') {\r\n    let content = [];\r\n\r\n    for (let idx = 0; idx < div.length; idx++) {\r\n        const item = div[idx];\r\n        const key = parentKey + '-' + item.type + '-' + idx.toString();\r\n        if (item.type === 'text') content.push(<Text key={key} index={key} txt={item}/>);\r\n        if (item.type === 'img') content.push(<Image key={key} initialState={initialState} img={item}/>);\r\n        if (item.type === 'btn') content.push(<Button key={key} initialState={initialState} btn={item} clickHandle={clickHandle}/>);\r\n        if (item.type === 'div') content.push(<Division key={key} index={key} initialState={initialState} div={item} clickHandle={clickHandle}/>);\r\n    }\r\n\r\n    return content;\r\n}","//import { stringifyUrl } from 'query-string';\r\n\r\nconst connectionURL = 'https://minesweeper-bke.herokuapp.com'\r\n\r\nexport async function startNewGame (body) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await fetch(`${connectionURL}/Init`, requestOptions);\r\n    const data = await response.json();\r\n    console.log(data.msg);\r\n    return data;\r\n}\r\n\r\nexport async function OpenSquare (body) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body)\r\n    };\r\n\r\n    const response = await fetch(`${connectionURL}/OpenSquare`, requestOptions);\r\n    const data = await response.json();\r\n    console.log(data.msg);\r\n    return data;\r\n}\r\n\r\nexport async function restartGame (body) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await fetch(`${connectionURL}/Restart`, requestOptions);\r\n    const data = await response.json();\r\n    console.log(data.msg);\r\n    return data;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { instanceOf } from 'prop-types';\r\nimport { CookiesProvider, withCookies, Cookies } from 'react-cookie';\r\nimport Board from './board';\r\nimport GameInfo from './gameinfo';\r\nimport Menu from './menu';\r\nimport OverScreen from './overscreen';\r\nimport * as screens from './screens.json';\r\nimport * as sqr from './squaresf';\r\nimport './index.css';\r\n\r\nclass Game extends React.Component {\r\n\r\n    static timerID = null;\r\n    static updates = [];\r\n\r\n    static propTypes = { cookies: instanceOf(Cookies).isRequired };\r\n\r\n    constructor (props) {\r\n        super (props);\r\n        const {rowsNumber, columnsNumber, minesNumber, time, holdTime} = props;\r\n        const { cookies } = this.props;\r\n\r\n        // setting initial state\r\n        this.state = {\r\n            gameID: cookies.get('gameID') || null,\r\n            rowsNumber,\r\n            columnsNumber,\r\n            minesNumber,\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            initialTime: time,\r\n            time,\r\n            holdTime,\r\n            phase: 'paused',\r\n            level: 'easy',\r\n            msg: '',\r\n        };\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    async componentDidMount () {\r\n        Game.timerID = null;\r\n\r\n        const {gameID, rowsNumber, columnsNumber, minesNumber} = this.state;\r\n        let response = {status: null};\r\n\r\n        if (gameID)  response = await sqr.restartGame({gameID, rowsNumber, columnsNumber, minesNumber});\r\n        if (!gameID || response.status === 'failed') {\r\n            const { cookies } = this.props;\r\n            cookies.remove();\r\n            const { gameID } = await sqr.startNewGame({rowsNumber, columnsNumber, minesNumber});\r\n            cookies.set('gameID', gameID);\r\n            this.setState({ gameID });\r\n        }\r\n    }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () { if (Game.timerID) clearInterval(Game.timerID); }\r\n\r\n    async restartGame (rowsNumber = null, columnsNumber = null, minesNumber = null) {\r\n        if (!minesNumber) minesNumber = this.state.minesNumber;\r\n        if (!rowsNumber) rowsNumber = this.state.rowsNumber;\r\n        if (!columnsNumber) columnsNumber = this.state.columnsNumber;\r\n        \r\n        await sqr.restartGame({gameID: this.state.gameID, rowsNumber, columnsNumber, minesNumber});\r\n        \r\n        // resseting timer\r\n        const time = this.state.initialTime;\r\n        if (Game.timerID) clearInterval(Game.timerID);\r\n        Game.timerID = null;\r\n\r\n        // reseting state\r\n        this.setState({\r\n            rowsNumber,\r\n            columnsNumber,\r\n            minesNumber,\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            time,\r\n            phase: 'paused',\r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    async clickHandle (button, index) {\r\n        let squaresValues = this.state.squaresValues.slice();\r\n        let squaresCSS = this.state.squaresCSS.slice();\r\n        const gameID = this.state.gameID;\r\n        const minesNumber = this.state.minesNumber;\r\n        let phase = this.state.phase;\r\n        let msg = '';\r\n\r\n        if (phase === 'game-over' || !this.state.time || !button) return;\r\n\r\n        // If it is the first click, initializes clock\r\n        if (phase === 'paused') {\r\n            phase = 'playing'\r\n            if (!Game.timerID) Game.timerID = setInterval(() => {\r\n                let time = this.state.time;\r\n                time--;\r\n                this.setState({ time });\r\n                // if time is up: game over\r\n                if (time <= 0) {\r\n                    this.setState({ phase: 'game-over', msg: 'Time is Over!' });\r\n                    clearInterval(Game.timerID);\r\n                }\r\n            },1000);\r\n        }\r\n\r\n        // if clicked with left button\r\n        if (button === 'left') {\r\n            // if square was already clicked, then return.\r\n            if (squaresCSS[index]) return;\r\n\r\n            const data = await sqr.OpenSquare({gameID, index, updates: Game.updates});\r\n            Game.updates = [];\r\n            squaresValues = data.squaresValues;\r\n            squaresCSS = data.squaresCSS;\r\n\r\n            // if square is a bomb, game-over\r\n            if (data.exploded) {\r\n                squaresCSS[index] = 'clicked'\r\n                phase = 'game-over';\r\n                msg = 'Exploded!!!';\r\n                clearInterval(Game.timerID);\r\n            // if square is not a bombSymbol, count bombs around the square\r\n            // Update value with the number of bombs and squaresCSS with\r\n            // 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            }\r\n        // if clicked with right button\r\n        } else if (button === 'right') {\r\n            // if the button is clicked, return\r\n            if (squaresCSS[index] && squaresCSS[index] !== 'saved') return;\r\n\r\n            // Cycle through the symbols '' (nothing), '\\u2691' (saved) and\r\n            // '?' (maybe) with each click\r\n            squaresValues[index] = squaresValues[index] === '' ? '\\u2691' :\r\n                squaresValues[index] === '\\u2691' ? '?' : '';\r\n            // set the corresponding squaresCSS if the 'saved' symbol is used\r\n            if (squaresValues[index] === '\\u2691') squaresCSS[index] = 'saved';\r\n            else squaresCSS[index] = '';\r\n            if (Game.updates.length > 0 && Game.updates[Game.updates.length - 1].index === index) Game.updates.pop();\r\n            Game.updates.push({index, squareValue: squaresValues[index], squareCSS: squaresCSS[index] });\r\n        }\r\n\r\n        // Check if only the bombSymbol squares are not clicked, if yes -> Victory!\r\n        if (phase !=='game-over' && minesNumber === squaresCSS.filter(x => x.indexOf('clicked') === -1).length) {\r\n            phase = 'game-over';\r\n            msg = 'Victory!';\r\n            clearInterval(Game.timerID);\r\n            const data = await sqr.OpenSquare({gameID, index, updates: Game.updates, win: true});\r\n            Game.updates = [];\r\n            squaresValues = data.squaresValues;\r\n            squaresCSS = data.squaresCSS;\r\n        }\r\n\r\n        // save the current state\r\n        this.setState({ squaresValues, squaresCSS, phase, msg });\r\n    }\r\n\r\n    levelControl (element) {\r\n        const level = element.currentTarget.value;\r\n        let rows = 13; // level Hard\r\n        let columns = 18; // level Hard\r\n        let minesNumber = 40; // level Hard 17%\r\n\r\n        if (level === 'easy') {\r\n            rows = 9;\r\n            columns = 9;\r\n            minesNumber = 10; // 12%\r\n        }\r\n        if (level === 'intermediate') {\r\n            rows = 12;\r\n            columns = 12;\r\n            minesNumber = 22; // 15%\r\n        }\r\n\r\n        document.documentElement.style.setProperty('--width', columns*40+'px');\r\n        document.documentElement.style.setProperty('--height', rows*40+'px');\r\n        this.setState({ level });\r\n        this.restartGame(rows, columns, minesNumber);\r\n    }\r\n\r\n    render () {\r\n        const minesNumber = this.state.minesNumber;\r\n        const squaresCSS = this.state.squaresCSS;\r\n        // Count the number of mines already discovered (saved)\r\n        const bombsNumber = minesNumber - squaresCSS.filter(x => x === 'saved').length\r\n            - squaresCSS.filter(x => x === 'saved-true').length;\r\n\r\n        let popup = null;\r\n        if (this.state.msg === 'Victory!') popup =\r\n            <OverScreen autoFadeOut={true} time={1} content={screens.victory}/>\r\n        if (this.state.msg === 'Time is Over!') popup =\r\n            <OverScreen autoFadeOut={true} time={1} content={screens.time}/>\r\n        if (this.state.msg === 'Exploded!!!') popup =\r\n            <OverScreen autoFadeOut={true} time={3} content={screens.explode}/>\r\n        \r\n        return (<>\r\n            <OverScreen autoFadeOut={false} time={5} content={screens.initial}/>\r\n            {popup}\r\n            <div className=\"title\">Minesweeper</div>\r\n            <div className=\"container\">\r\n                <div className=\"game-area\">\r\n                    <GameInfo bombsNumber={bombsNumber} time={this.state.time}\r\n                        msg={this.state.msg}/>\r\n                    <div className=\"game\">\r\n                        <Board squaresValues={this.state.squaresValues}\r\n                            squaresCSS={this.state.squaresCSS}\r\n                            rowsNumber={this.state.rowsNumber}\r\n                            columnsNumber={this.state.columnsNumber}\r\n                            holdTime={this.state.holdTime}\r\n                            clickHandle={(button, i) => this.clickHandle(button, i)}/>\r\n                    </div>\r\n                    <Menu level={this.state.level}\r\n                        levelControl={(element) => this.levelControl(element)}/>\r\n                    <div className=\"restart\">\r\n                        <button className=\"restart-button\"\r\n                            onClick={() => this.restartGame()}>\r\n                            Restart Game\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nconst GameApp = withCookies(Game)\r\n\r\nReactDOM.render(\r\n    <CookiesProvider>\r\n        <GameApp rowsNumber={9} columnsNumber={9} minesNumber={10} time={120} holdTime={0.3}/>\r\n    </CookiesProvider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}