{"version":3,"sources":["index.js"],"names":["Square","props","cssClass","squareCSS","value","squareValue","className","onClick","mouse","clickHandle","onContextMenu","preventDefault","BoardRow","columns","squaresValues","map","column","squaresCSS","row","toString","Board","rowsNumber","columnsNumber","rows","Array","initIndex","endIndex","slice","GameInfo","Zerofill","bombsNumber","msg","time","LevelOption","label","level","toUpperCase","type","name","id","checked","onChange","element","levelControl","htmlFor","Menu","radios","index","Game","minesPositions","minesNumber","i","Math","floor","random","includes","bombs","length","state","init","fill","initialTime","bombSymbol","phase","timerID","clearInterval","this","setState","positions","setInterval","OpenAllSquares","button","CountBombs","OpenSquares","filter","x","indexOf","currentTarget","restartGame","HomeScreen","React","Component","txtClass","imgClass","btnClass","divClass","alt","src","win","allPositions","pos","push","rowInit","columnInit","position","number","width","sign","join","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.273b6dcd.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square (props) {\r\n    const cssClass = props.squareCSS + ' square';\r\n    let value = props.squareValue;\r\n    const clickHandle = (mouse) => props.clickHandle(mouse);\r\n    const contextHandle = (mouse) => {mouse.preventDefault(); props.clickHandle(mouse);}\r\n\r\n    return (\r\n        <button className={cssClass} onClick={clickHandle} onContextMenu={contextHandle}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n\r\n    const columns = props.squaresValues.map((squareValue, column) =>\r\n        <Square key={'square-' + props.row.toString() + '-' + column.toString()}\r\n            squareValue={squareValue}\r\n            squareCSS={props.squaresCSS[column]}\r\n            clickHandle={(mouse) => props.clickHandle(mouse, column)}/>\r\n    );\r\n\r\n    return(\r\n        <div className=\"board-row\">\r\n            {columns}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Board (props) {\r\n    const rowsNumber = props.rowsNumber;\r\n    const columnsNumber = props.columnsNumber;\r\n\r\n    const rows = Array(rowsNumber);\r\n\r\n    for (let row = 0; row < rowsNumber; row++) {\r\n        const initIndex = row * columnsNumber;\r\n        const endIndex = initIndex + columnsNumber;\r\n        const squaresValues = props.squaresValues.slice(initIndex, endIndex);\r\n        const squaresCSS = props.squaresCSS.slice(initIndex, endIndex);\r\n        rows[row] = <BoardRow key={'row-' + row.toString()}\r\n            row={row}\r\n            squaresValues={squaresValues}\r\n            squaresCSS={squaresCSS}\r\n            clickHandle={(mouse, column) => props.clickHandle(mouse, initIndex + column)}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-board\">\r\n            {rows}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GameInfo (props) {\r\n    return (\r\n        <div className=\"game-info game\">\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.bombsNumber,3)}</p>\r\n            </div>\r\n            <div className=\"game-over\">\r\n                <p>{props.msg}</p>\r\n            </div>\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.time,3)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LevelOption (props) {\r\n    const onChange = (element) => props.levelControl(element);\r\n    const label = props.level[0].toUpperCase() + props.level.slice(1);\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <input type=\"radio\" name=\"level\"\r\n            id={props.level}\r\n            value={props.level}\r\n            checked={props.checked}\r\n            onChange={onChange}/>\r\n            <label htmlFor={props.level}> {label}</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Menu (props) {\r\n    const levelControl = (element) => props.levelControl(element);\r\n    const levels = ['easy', 'intermediate', 'hard'];\r\n\r\n    const radios = levels.map((level, index) =>\r\n        <LevelOption key={'op-' + index.toString()}\r\n        level={level}\r\n        checked={props.level === level}\r\n        levelControl={levelControl}/>\r\n    );\r\n\r\n    return (\r\n        <div className=\"level game\">\r\n            {radios}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    static timerID = null;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n        const rowsNumber = props.rows;\r\n        const columnsNumber = props.columns;\r\n\r\n        // sorting mines positions\r\n        const minesPositions = Array(props.minesNumber);\r\n        for (let i = 0; i < props.minesNumber; i++) {\r\n            const index = Math.floor(Math.random() * rowsNumber * columnsNumber);\r\n            if (!minesPositions.includes(index)) minesPositions[i] = index;\r\n            else i--;\r\n        }\r\n\r\n        // sorting bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // setting initial state\r\n        this.state = {\r\n            init: true,\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            minesPositions,\r\n            initialTime: props.time,\r\n            time: props.time,\r\n            rowsNumber,\r\n            columnsNumber,\r\n            bombSymbol: bombs[index],\r\n            phase: 'paused',\r\n            level: 'easy',\r\n            msg: '',\r\n        };\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    componentDidMount () { Game.timerID = null; }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () { if (Game.timerID) clearInterval(Game.timerID); }\r\n\r\n    restartGame (rowsNumber = null, columnsNumber = null, minesNumber = null) {\r\n        // reseting size\r\n        if (!rowsNumber) rowsNumber = this.state.rowsNumber;\r\n        if (!columnsNumber) columnsNumber = this.state.columnsNumber;\r\n        if (!minesNumber) minesNumber = this.state.minesPositions.length;\r\n\r\n        // sorting mines positions\r\n        const minesPositions = Array(minesNumber);\r\n        for (let i = 0; i < minesNumber; i++) {\r\n            const index = Math.floor(Math.random() * rowsNumber * columnsNumber);\r\n            if (!minesPositions.includes(index)) minesPositions[i] = index;\r\n            else i--;\r\n        }\r\n\r\n        // resseting timer\r\n        const time = this.state.initialTime;\r\n        if (Game.timerID) clearInterval(Game.timerID);\r\n        Game.timerID = null;\r\n\r\n        // sorting new bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // reseting state\r\n        this.setState({\r\n            init: false,\r\n            squaresValues: Array(rowsNumber * columnsNumber).fill(''),\r\n            squaresCSS: Array(rowsNumber * columnsNumber).fill(''),\r\n            minesPositions,\r\n            time,\r\n            rowsNumber,\r\n            columnsNumber,\r\n            bombSymbol: bombs[index],\r\n            phase: 'paused',\r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    clickHandle (mouse, index) {\r\n        let squaresValues = this.state.squaresValues.slice();\r\n        let squaresCSS = this.state.squaresCSS.slice();\r\n        let phase = this.state.phase;\r\n        let msg = '';\r\n        let positions = [];\r\n\r\n        if (phase === 'game-over' || !this.state.time) return;\r\n\r\n        // If it is the first click, initializes clock\r\n        if (phase === 'paused') {\r\n            phase = 'playing'\r\n            if (!Game.timerID) Game.timerID = setInterval(() => {\r\n                let time = this.state.time;\r\n                time--;\r\n                this.setState({ time });\r\n                // if time is up: game over\r\n                if (time <= 0) {\r\n                    const squaresValues = this.state.squaresValues.slice();\r\n                    const squaresCSS = this.state.squaresCSS.slice();\r\n                    OpenAllSquares(squaresValues, squaresCSS,\r\n                        this.state.minesPositions,\r\n                        this.state.bombSymbol,\r\n                        this.state.rowsNumber,\r\n                        this.state.columnsNumber);\r\n                    this.setState({ squaresValues , squaresCSS , phase: 'game-over',\r\n                        msg: 'Time is Over!' });\r\n                    clearInterval(Game.timerID);\r\n                }\r\n            },1000);\r\n        }\r\n\r\n        // if clicked with left button\r\n        if (mouse.button === 0) {\r\n            // if square was already clicked, then return.\r\n            if (squaresCSS[index]) return;\r\n\r\n            // if square is a bomb, game-over\r\n            if (this.state.minesPositions.includes(index)) {\r\n                OpenAllSquares(squaresValues, squaresCSS, this.state.minesPositions,\r\n                    this.state.bombSymbol, this.state.rowsNumber, this.state.columnsNumber);\r\n                squaresCSS[index] = 'clicked'\r\n                phase = 'game-over';\r\n                msg = 'Exploded!!!';\r\n                clearInterval(Game.timerID);\r\n            // if square is not a bombSymbol, count bombs around the square\r\n            // Update value with the number of bombs and squaresCSS with\r\n            // 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            } else {\r\n                [squaresValues[index], squaresCSS[index], positions] =\r\n                    CountBombs(index,\r\n                        this.state.minesPositions,\r\n                        this.state.rowsNumber,\r\n                        this.state.columnsNumber);\r\n                if (squaresValues[index] === 0) {\r\n                    squaresValues[index] = '';\r\n                // if square has no bombSymbol around, open all the squares around\r\n                    for (const position of positions)\r\n                        OpenSquares(position, squaresValues, squaresCSS,\r\n                        this.state.minesPositions,\r\n                        this.state.rowsNumber,\r\n                        this.state.columnsNumber);\r\n                }\r\n            }\r\n        // if clicked with right button\r\n        } else if (mouse.button === 2) {\r\n            // if the button is clicked, return\r\n            if (squaresCSS[index] && squaresCSS[index] !== 'saved') return;\r\n\r\n            // Cycle through the symbols '' (nothing), '\\u2691' (saved) and\r\n            // '?' (maybe) with each click\r\n            squaresValues[index] = squaresValues[index] === '' ? '\\u2691' :\r\n                squaresValues[index] === '\\u2691' ? '?' : '';\r\n            // set the corresponding squaresCSS if the 'saved' symbol is used\r\n            if (squaresValues[index] === '\\u2691') squaresCSS[index] = 'saved';\r\n            else squaresCSS[index] = '';\r\n        }\r\n\r\n        // Check if only the bombSymbol squares are not clicked, if yes -> Victory!\r\n        if (phase !=='game-over' && this.state.minesPositions.length ===\r\n            squaresCSS.filter(x => x.indexOf('clicked') === -1).length) {\r\n            phase = 'game-over';\r\n            msg = 'Victory!';\r\n            clearInterval(Game.timerID);\r\n            OpenAllSquares(squaresValues, squaresCSS, this.state.minesPositions,\r\n                this.state.bombSymbol, this.state.rowsNumber, this.state.columnsNumber, true);\r\n        }\r\n\r\n        // save the current state\r\n        this.setState({ squaresValues, squaresCSS, phase, msg });\r\n    }\r\n\r\n    levelControl (element) {\r\n        const level = element.currentTarget.value;\r\n        let rows = 13; // level Hard\r\n        let columns = 18; // level Hard\r\n        let minesNumber = 40; // level Hard 17%\r\n\r\n        if (level === 'easy') {\r\n            rows = 9;\r\n            columns = 9;\r\n            minesNumber = 10; // 12%\r\n        }\r\n        if (level === 'intermediate') {\r\n            rows = 12;\r\n            columns = 12;\r\n            minesNumber = 22; // 15%\r\n        }\r\n\r\n        this.setState({ level });\r\n        this.restartGame(rows, columns, minesNumber);\r\n    }\r\n\r\n    render () {\r\n        const minesNumber = this.state.minesPositions.length;\r\n        const squaresCSS = this.state.squaresCSS;\r\n        // Count the number of mines already discovered (saved)\r\n        const bombsNumber = minesNumber - squaresCSS.filter(x => x === 'saved').length\r\n            - squaresCSS.filter(x => x === 'saved-true').length;\r\n\r\n        return (<>\r\n            <HomeScreen init={this.state.init} onClick={() => this.restartGame()}/>\r\n            <div className=\"title\">Minesweeper</div>\r\n            <div className=\"container\">\r\n                <div className=\"game-area\">\r\n                    <GameInfo bombsNumber={bombsNumber} time={this.state.time}\r\n                        msg={this.state.msg}/>\r\n                    <div className=\"game\">\r\n                        <Board squaresValues={this.state.squaresValues}\r\n                            squaresCSS={this.state.squaresCSS}\r\n                            rowsNumber={this.state.rowsNumber}\r\n                            columnsNumber={this.state.columnsNumber}\r\n                            clickHandle={(mouse, i) => this.clickHandle(mouse, i)}/>\r\n                    </div>\r\n                    <Menu level={this.state.level}\r\n                        levelControl={(element) => this.levelControl(element)}/>\r\n                    <div className=\"restart\">\r\n                        <button className=\"restart-button\"\r\n                            onClick={() => this.restartGame()}>\r\n                            Restart Game\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nfunction HomeScreen (props) {\r\n    let txtClass = 'initial-txt'\r\n    let imgClass = 'initial-img';\r\n    let btnClass = 'restart-button abs-btn';\r\n    let divClass = 'initial';\r\n    if (!props.init) {\r\n        txtClass += ' trigger';\r\n        imgClass += ' trigger';\r\n        btnClass += ' trigger';\r\n        divClass += ' trigger';\r\n    }\r\n\r\n    return (\r\n        <div className={divClass}>\r\n            <img className={imgClass} alt=\"background\" src=\"./Minebackground.png\"/>\r\n            <img className={imgClass + ' mine'} alt=\"Mine by Samuel Schoenberger from the Noun Project\" src=\"./MinelogoSolo.png\"/>\r\n            <div className={txtClass}>* Mine icon by Samuel Schoenberger from the Noun Project</div>\r\n            <button className={btnClass} onClick={props.onClick}>START</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction OpenAllSquares (squaresValues, squaresCSS, minesPositions, bombSymbol, rows, columns, win=false) {\r\n    for (let index = 0; index < squaresValues.length; index++) {\r\n        if (minesPositions.includes(index)) {\r\n            squaresValues[index] = squaresCSS[index] === 'saved' || win ? '\\u2713' :\r\n                bombSymbol;\r\n            squaresCSS[index] = squaresCSS[index] === 'saved' || win ? 'saved-true' :\r\n                'clicked exploded';\r\n        }\r\n        if (squaresCSS[index] === 'saved') {\r\n            squaresValues[index] = '\\u2717';\r\n            squaresCSS[index] = 'exploded';\r\n        }\r\n        if (!squaresCSS[index]) {\r\n            [squaresValues[index], squaresCSS[index]] = CountBombs(index, minesPositions,\r\n                rows, columns);\r\n            if (squaresValues[index] === 0) squaresValues[index] = '';\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nfunction OpenSquares (index, squaresValues, squaresCSS, minesPositions, rows, columns) {\r\n    let allPositions = [index];\r\n    let positions = [];\r\n    let i = 0;\r\n\r\n    while (true) {\r\n        // if square was not clicked:\r\n        if (!squaresCSS[allPositions[i]]) {\r\n            // Count bombs around the square, update value with the number of bombs\r\n            // and squaresCSS with 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            [squaresValues[allPositions[i]], squaresCSS[allPositions[i]], positions] =\r\n                CountBombs(allPositions[i], minesPositions, rows, columns);\r\n            if (squaresValues[allPositions[i]] === 0) {\r\n                squaresValues[allPositions[i]] = '';\r\n                for (const pos of positions) \r\n                    if (!allPositions.includes(pos))\r\n                        allPositions.push(pos);\r\n            }\r\n        }\r\n        if (i < allPositions.length - 1) i++;\r\n        else return;\r\n    }\r\n}\r\n\r\nfunction CountBombs (index, minesPositions, rowsNumber, columnsNumber) {\r\n    const cssClasses = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'];\r\n    // index = row * columnsNumber + column\r\n    // index/columnsNumber = row (quotient) + column/columnsNumber (remainder)\r\n    const rowInit = Math.floor(index / columnsNumber);\r\n    const columnInit = index % columnsNumber;\r\n    let positions = [];\r\n\r\n    for (let row = rowInit - 1; row < rowInit + 2; row++) {\r\n        if (row < 0 || row > rowsNumber - 1) continue;\r\n        for (let column = columnInit -1; column < columnInit + 2; column++) {\r\n            if (row === rowInit && column === columnInit) continue;\r\n            if (column < 0 || column > columnsNumber - 1) continue;\r\n            positions.push(row * columnsNumber + column);\r\n        }\r\n    }\r\n\r\n    // Count bombs in adjacent squares\r\n    let bombs = 0;\r\n    for (const position of positions) if (minesPositions.includes(position)) bombs++;\r\n\r\n    // return the number of bombs, the updated cssClass and the valid positions around index\r\n    return([bombs, 'clicked ' + cssClasses[bombs], positions]);\r\n}\r\n\r\nfunction Zerofill (number,width) {\r\n    let sign = '';\r\n\r\n    if (number < 0) {\r\n        number *= -1;\r\n        sign = '-';\r\n    }\r\n\r\n    width -= number.toString().length - 1;\r\n    if ( width > 0 )\r\n        return sign + new Array(width).join('0') + number;\r\n    \r\n    // Always return a string\r\n    return sign + number + \"\";\r\n}\r\n\r\nReactDOM.render(\r\n    <Game rows={9} columns={9} minesNumber={10} time={120}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}