{"version":3,"sources":["index.js"],"names":["Square","props","cssClass","state","value","className","onClick","mouse","clickHandle","onContextMenu","preventDefault","BoardRow","size","squares","Array","i","values","length","Board","rows","slice","j","GameInfo","Zerofill","bombs","msg","time","LevelOption","label","level","toUpperCase","type","name","id","checked","onChange","element","levelControl","for","Menu","levels","radios","Game","mines","minesNumber","index","Math","floor","random","includes","fill","bomb","phase","initialTime","timerID","clearInterval","this","setState","positions","setInterval","OpenAllSquares","button","CountBombs","OpenSquares","filter","x","indexOf","currentTarget","restartGame","React","Component","bombSymbol","win","borderA","borderB","border","splice","number","width","sign","toString","join","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.007fdbae.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square (props) {\r\n    const cssClass = props.state.cssClass + ' square';\r\n    let value = props.state.value;\r\n    const clickHandle = (mouse) => props.clickHandle(mouse);\r\n    const contextHandle = (mouse) => {mouse.preventDefault(); props.clickHandle(mouse);}\r\n\r\n    return (\r\n        <button className={cssClass} onClick={clickHandle} onContextMenu={contextHandle}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n    const size = props.state.size;\r\n    const squares = Array(size);\r\n\r\n    for (let i = 0; i < squares.length; i++) {\r\n        const value = props.state.values[i];\r\n        const cssClass = props.state.cssClass[i];\r\n        const state = {value, cssClass};\r\n        const clickHandle = (mouse) => props.clickHandle(mouse, i);\r\n        squares[i] = <Square state={state} clickHandle={clickHandle}/>;\r\n    }\r\n\r\n    return(\r\n        <div className=\"board-row\">\r\n            {squares}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Board (props) {\r\n    const size = props.state.size;\r\n\r\n    const rows = Array(size);\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const values = props.state.values.slice(i * size, i * size + size);\r\n        const cssClass = props.state.cssClass.slice(i * size, i * size + size);\r\n        const state = {values, cssClass, size};\r\n        const clickHandle = (mouse, j) => props.clickHandle(mouse, i * size + j);\r\n        rows[i] = <BoardRow state={state} clickHandle={clickHandle}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-board\">\r\n            {rows}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GameInfo (props) {\r\n    return (\r\n        <div className=\"game-info game\">\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.bombs,3)}</p>\r\n            </div>\r\n            <div className=\"game-over\">\r\n                <p>{props.msg}</p>\r\n            </div>\r\n            <div className=\"bombs-time\">\r\n                <p>{Zerofill(props.time,3)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LevelOption (props) {\r\n    const onChange = (element) => props.levelControl(element);\r\n    const label = props.level[0].toUpperCase() + props.level.slice(1);\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <input type=\"radio\" name=\"level\" id={props.level} value={props.level} checked={props.checked} onChange={onChange}/>\r\n            <label for={props.level}> {label}</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Menu (props) {\r\n    const levelControl = (element) => props.levelControl(element);\r\n    const levels = ['easy', 'intermediate', 'hard'];\r\n    const radios = Array(levels.length);\r\n\r\n    for (let i=0; i < levels.length; i++) {\r\n        radios[i] = <LevelOption level={levels[i]} checked={props.level === levels[i]} levelControl={levelControl}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"level game\">\r\n            {radios}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    static timerID = null;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n        const size = props.size;\r\n\r\n        // sorting mines positions\r\n        const mines = Array(props.minesNumber);\r\n        for (let i=0; i < mines.length; i++) {\r\n            const index = Math.floor(Math.random() * size ** 2);\r\n            if (!mines.includes(index)) mines[i] = index;\r\n            else i--;\r\n        }\r\n\r\n        // sorting bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // setting initial state\r\n        this.state = {\r\n            values: Array(size ** 2).fill(''),\r\n            cssClass: Array(size ** 2).fill(''),\r\n            bomb: bombs[index],\r\n            size,\r\n            mines,\r\n            phase: 'paused',\r\n            initialTime: props.time,\r\n            time: props.time,\r\n            msg: '',\r\n            level: 'easy'\r\n        };\r\n    }\r\n\r\n    // when mounting, set timer to null\r\n    componentDidMount () { Game.timerID = null; }\r\n\r\n    // when unmouting, reset timer\r\n    componentWillUnmount () { if (Game.timerID) clearInterval(Game.timerID); }\r\n\r\n    restartGame (size = null, minesNumber = null) {\r\n        // reseting size\r\n        if (!size) size = this.state.size;\r\n        if (!minesNumber) minesNumber = this.state.mines.length;\r\n\r\n        // sorting mines positions\r\n        const mines = Array(minesNumber);\r\n        for (let i=0; i < mines.length; i++) {\r\n            const index = Math.floor(Math.random() * size ** 2);\r\n            if (!mines.includes(index)) mines[i] = index;\r\n            else i--;\r\n        }\r\n        // DEV TEST LINE\r\n        //const mines = [1];\r\n\r\n        // resseting timer\r\n        const time = this.state.initialTime;\r\n        if (Game.timerID) clearInterval(Game.timerID);\r\n        Game.timerID = null;\r\n\r\n        // sorting new bomb symbol\r\n        const bombs = ['\\u2620','\\u2622','\\u2623'];\r\n        const index = Math.floor(Math.random() * bombs.length);\r\n\r\n        // reseting state\r\n        this.setState({\r\n            values: Array(size ** 2).fill(''),\r\n            cssClass: Array(size ** 2).fill(''),\r\n            bomb: bombs[index],\r\n            size,\r\n            mines,\r\n            phase: 'paused',\r\n            time,\r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    clickHandle (mouse, index) {\r\n        let values = this.state.values;\r\n        let cssClass = this.state.cssClass;\r\n        let phase = this.state.phase;\r\n        let msg = '';\r\n        let positions = [];\r\n\r\n        if (phase === 'game-over' || !this.state.time) return;\r\n\r\n        // If it is the first click, initializes clock\r\n        if (phase === 'paused') {\r\n            phase = 'playing'\r\n            if (!Game.timerID) Game.timerID = setInterval(() => {\r\n                let time = this.state.time;\r\n                time--;\r\n                this.setState({ time });\r\n                // if time is up: game over\r\n                if (time <= 0) {\r\n                    [values, cssClass] = OpenAllSquares(this.state.values,this.state.cssClass,this.state.mines,this.state.size,this.state.bomb);\r\n                    this.setState({ values , cssClass , phase: 'game-over', msg: 'Time is Over!' });\r\n                    clearInterval(Game.timerID);\r\n                }\r\n            },1000);\r\n        }\r\n\r\n        // if clicked with left button\r\n        if (mouse.button === 0) {\r\n            // if square was already clicked, then return.\r\n            if (cssClass[index]) return;\r\n\r\n            // if square is a bomb, game-over\r\n            if (this.state.mines.includes(index)) {\r\n                [values, cssClass] = OpenAllSquares(values, cssClass, this.state.mines, this.state.size, this.state.bomb);\r\n                cssClass[index] = 'clicked'\r\n                phase = 'game-over';\r\n                msg = 'Exploded!!!';\r\n                clearInterval(Game.timerID);\r\n            // if square is not a bomb, count bombs around the square\r\n            // Update value with the number of bombs and cssClass with\r\n            // 'clicked ' + the number of bombs as text\r\n            // positions keep the indexes of the squares around\r\n            } else {\r\n                [values[index], cssClass[index], positions] = CountBombs(this.state.size, this.state.mines, index);\r\n                if (values[index] === 0) values[index] = '';\r\n            }\r\n            // if square has no bomb around, open all the squares around\r\n            if (!values[index]) for (const i of positions)\r\n                [values, cssClass] = OpenSquares(i, values, cssClass, this.state.mines, this.state.size, this.state.bomb);\r\n        // if clicked with right button\r\n        } else if (mouse.button === 2) {\r\n            // if the button is clicked, return\r\n            if (cssClass[index] && cssClass[index] !== 'saved') return;\r\n\r\n            // Cycle through the symbols '' (nothing), '\\u2691' (saved) and '?' (maybe) with each click\r\n            values[index] = values[index] === '' ? '\\u2691' : values[index] === '\\u2691' ? '?' : '';\r\n            // set the corresponding cssClass if the 'saved' symbol is used\r\n            if (values[index] === '\\u2691') cssClass[index] = 'saved';\r\n            else cssClass[index] = '';\r\n        }\r\n\r\n        // Check if only the bomb squares are not clicked, if yes -> Victory!\r\n        if (phase !=='game-over' && this.state.mines.length === cssClass.filter(x => x.indexOf('clicked') === -1).length) {\r\n            phase = 'game-over';\r\n            msg = 'Victory!';\r\n            clearInterval(Game.timerID);\r\n            [values, cssClass] = OpenAllSquares(values, cssClass, this.state.mines, this.state.size, this.state.bomb, true);\r\n        }\r\n\r\n        // save the current state\r\n        this.setState({ values, cssClass, phase, msg });\r\n    }\r\n\r\n    levelControl (element) {\r\n        const level = element.currentTarget.value;\r\n        let size = 15; // level Hard\r\n        let minesNumber = 40; // level Hard\r\n\r\n        if (level === 'easy') {\r\n            size = 9;\r\n            minesNumber = 10;\r\n        }\r\n        if (level === 'intermediate') {\r\n            size = 12;\r\n            minesNumber = 25;\r\n        }\r\n\r\n        this.setState({ size, level });\r\n        this.restartGame(size, minesNumber);\r\n    }\r\n\r\n    render () {\r\n        const mines = this.state.mines;\r\n        const cssClass = this.state.cssClass;\r\n        // Count the number of mines already discovered (saved)\r\n        const bombs = mines.length - cssClass.filter(x => x === 'saved').length - cssClass.filter(x => x === 'saved-true').length;\r\n\r\n        return (<div>\r\n            <div className=\"title\">Minesweeper</div>\r\n            <div className=\"game-area\">\r\n                <div>\r\n                <GameInfo bombs={bombs} time={this.state.time} msg={this.state.msg}/>\r\n                <div className=\"game\">\r\n                    <Board state={this.state} clickHandle={(mouse, i) => this.clickHandle(mouse, i)}/>\r\n                </div>\r\n                <Menu level={this.state.level} levelControl={(element) => this.levelControl(element)}/>\r\n                <div className=\"restart\">\r\n                    <button className=\"restart-button\" onClick={() => this.restartGame()}>Restart Game</button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nfunction OpenAllSquares (values, cssClass, mines, size, bombSymbol, win=false) {\r\n    for (let index = 0; index < values.length; index++) {\r\n        if (mines.includes(index)) {\r\n            values[index] = cssClass[index] === 'saved' || win ? '\\u2713' : bombSymbol;\r\n            cssClass[index] = cssClass[index] === 'saved' || win ? 'saved-true' : 'clicked exploded';\r\n        }\r\n        if (cssClass[index] === 'saved') {\r\n            values[index] = '\\u2717';\r\n            cssClass[index] = 'exploded';\r\n        }\r\n        if (!cssClass[index]) {\r\n            [values[index], cssClass[index]] = CountBombs(size, mines, index);\r\n            if (values[index] === 0) values[index] = '';\r\n        }\r\n    }\r\n    return [values, cssClass];\r\n}\r\n\r\nfunction OpenSquares (index, values, cssClass, mines, size, bombSymbol) {\r\n    let positions = [];\r\n\r\n    // if square was already clicked, then return.\r\n    if (cssClass[index]) return [values, cssClass];\r\n\r\n    // Count bombs around the square, update value with the number of bombs\r\n    // and cssClass with 'clicked ' + the number of bombs as text\r\n    // positions keep the indexes of the squares around\r\n    [values[index], cssClass[index], positions] = CountBombs(size, mines, index);\r\n    if (values[index] === 0) values[index] = '';\r\n\r\n    // if square has no bomb around, open all the squares around\r\n    if (!values[index]) for (const i of positions)\r\n        [values, cssClass] = OpenSquares(i, values, cssClass, mines, size, bombSymbol);\r\n\r\n    // return the updated values and cssClasses -> return them to clickHandle to update state\r\n    return [values, cssClass];\r\n}\r\n\r\nfunction CountBombs (size, mines, index) {\r\n    const cssClasses = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'];\r\n    let positions = [index - size - 1, index - size, index - size + 1, index - 1, index + 1, index + size -1, index + size, index + size + 1];\r\n    const borderA = Array(size);\r\n    const borderB = Array(size);\r\n    let border = [];\r\n\r\n    // Which indexes are at the borders\r\n    for (let i=0; i < size; i++) {\r\n        borderA[i] = i * size;\r\n        borderB[i] = (i + 1) * size - 1;\r\n    }\r\n    \r\n    // If the index is in one of the borders, we don't want to count\r\n    // bombs that are in the other border\r\n    if (borderA.includes(index)) border = borderB;\r\n    if (borderB.includes(index)) border = borderA;\r\n\r\n    // Find itens that are above or below the board\r\n    // and itens that are in the other border and remove them\r\n    for (let i=0; i < 8; i++) {\r\n        if (positions[i] < 0 || border.includes(positions[i]) || positions[i] > size ** 2 - 1)\r\n            positions.splice(i, 1, '');\r\n    }\r\n    positions = positions.filter(x => x !== '');\r\n\r\n    // Count bombs in adjacent squares\r\n    let bombs = 0;\r\n    for (const i of positions) if (mines.includes(i)) bombs++;\r\n\r\n    // return the number of bombs, the updated cssClass and the valid positions around index\r\n    return([bombs, 'clicked ' + cssClasses[bombs], positions])\r\n}\r\n\r\nfunction Zerofill (number,width) {\r\n    let sign = '';\r\n\r\n    if (number < 0) {\r\n        number *= -1;\r\n        sign = '-';\r\n    }\r\n\r\n    width -= number.toString().length - 1;\r\n    if ( width > 0 )\r\n        return sign + new Array(width).join('0') + number;\r\n    \r\n    // Always return a string\r\n    return sign + number + \"\";\r\n}\r\n\r\nReactDOM.render(\r\n    <Game size={9} minesNumber={10} time={120}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}